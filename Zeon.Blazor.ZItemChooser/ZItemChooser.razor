@using Zeon.Blazor.ZInputContainer
@namespace Zeon.Blazor.ZItemChooser
@typeparam KeyType

<div class="zeon-ItemChooser-content">
    <div class="row m-auto p-0">
        <div class="col m-auto p-0">
            <input id="@_inputId" class="form-control container-fluid p-0" type="text" @onkeydown="(e)=> InputOnKeyDown(e)" @bind="_displayValue" @oninput="OnInput" />
        </div>
        @if (ShowSelectedKey)
        {
            <div class="col-4 p-0 m-auto">
                <div class="row p-0 m-auto">
                    <div class="col-auto m-auto p-0">
                        <span>@KeyDisplayText</span>
                    </div>
                    <div class="col m-auto p-0">
                        <input readonly="readonly" class="form-control container-fluid p-0 text-center" type="text" @bind="_displayKey" />
                    </div>
                </div>
            </div>
        }
    </div>

    @if (_showItems)
    {
        <div id="@_listId" class="container-fluid  p-0 m-auto zeon-ItemChooser-listItems">
            @{
                int i = 1;
                var bgColor = @OddItemColor;
            }

            @foreach (var item in _dataSource)
            {
                var index = i;
                var id = Name + index.ToString();
                <button role="listitem" class="m-auto zeon-ItemChooser-Item" style="background-color:@bgColor" id=@id @onkeydown="(e)=> ItemOnKeyPress(e,index)" @ondblclick="(e)=> ItemOnDblClick(e,index) ">@item.Value</button>
                i++;
                bgColor = bgColor == @OddItemColor ? @EvenItemColor : @OddItemColor;
            }
            @if (_dataSource.Count == 0)
            {
                <span class="w-100 p-1 m-auto d-block" style="background-color:@NotFoundRecordBackgroundColor">
                    @NotFoundRecordText
                </span>
            }
        </div>
    }
</div>