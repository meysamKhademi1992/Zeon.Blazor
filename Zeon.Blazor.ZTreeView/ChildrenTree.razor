@namespace Zeon.Blazor.ZTreeView
@using Zeon.Blazor.ZInput
@using Zeon.Blazor.ZTreeView.Constants

@{
    var dragOnEnterGroupClass = GetDragOnEnterGroupClass(ItemId);
}

<ul class="@dragOnEnterGroupClass">

    @{
        var dataFiltered = Items.Where(Filter).ToArray();
        @for (int index = 0; index < dataFiltered.Length; index++)
        {
            var item = dataFiltered[index];

            string checkBoxClass = GetCheckBoxClassMode(Data, item);
            string expandedClass = GetExpandedClassMode(Data, item);
            string selectedClass = GetSelectedClassMode(item.Id);
            string dragOnEnterTopClass = GetDragOnEnterTopClass(item);
            string dragOnEnterBottomClass = GetDragOnEnterBottomClass(item);
            string dragOnEnterIntoClass = GetDragOnEnterIntoClass(item);

            <div class="zeon-tree-view-item-drop-line @dragOnEnterTopClass" style="--drop-elements-display:@DropElementsDisplay"
             @ondragenter="(e)=> HandleOnDragEnter.InvokeAsync((e,DragToPosition.Top, item))" @ondragenter:stopPropagation=true
             @ondragleave="(e)=> HandleOnDragLeave.InvokeAsync((e,DragToPosition.Top, item))" @ondragleave:stopPropagation=true
             @ondrop="(e)=> OnDropStart(e,DragToPosition.Top,item)" @ondrop:stopPropagation=true ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
            </div>

            <li id="@GetItemId(item.Id)" class="zeon-tree-view-item">

                <div class="zeon-tree-view-item-row @selectedClass @dragOnEnterIntoClass"
                 @onclick:stopPropagation=true @onclick="()=> SelectedOnClick.InvokeAsync(item.Id)"
             draggable="true"
                 @ondragstart="(e)=> OnDragStart(e,item)" @ondragstart:stopPropagation=true
                 @ondragend="(e)=> OnDragEnd(e,item)" @ondragend:stopPropagation=true>

                    <span class="@expandedClass" @onclick="()=> ExpandedOnClick.InvokeAsync(item.Id)" @onclick:stopPropagation=true></span>
                    @if (ShowCheckedBox)
                    {
                        <span class="@checkBoxClass" @onclick="()=> CheckedOnClick.InvokeAsync(item.Id)" @onclick:stopPropagation=true></span>
                    }
                    <span class="zeon-tree-view-item-text">@item.Text</span>
                    <span class="zeon-tree-view-item-drop-into" style="--drop-elements-display:@DropElementsDisplay"
                      @ondragenter="(e)=> HandleOnDragEnter.InvokeAsync((e,DragToPosition.Into,item))" @ondragenter:stopPropagation=true
                      @ondragleave="(e)=> HandleOnDragLeave.InvokeAsync((e,DragToPosition.Into,item))" @ondragleave:stopPropagation=true
                      @ondrop="(e)=> OnDropStart(e,DragToPosition.Into,item)" @ondrop:stopPropagation=true ondragover="event.preventDefault();">
                    </span>
                    @if (@*ShowActionButtons &&*@ true)
                    {
                        <div class="zeon-tree-view-item-actions-group">
                            <span class="zeon-tree-view-item-action fa fa-plus" @onclick="(e)=> DataChangeOnClick(item,ChangeState.Add)" @onclick:stopPropagation=true></span>
                            <span class="zeon-tree-view-item-action fa fa-edit" @onclick="(e)=> DataChangeOnClick(item,ChangeState.Edit)" @onclick:stopPropagation=true></span>
                            <span class="zeon-tree-view-item-action fa fa-trash" @onclick="(e)=> RemoveItemOnClick.InvokeAsync(item)" @onclick:stopPropagation=true></span>
                        </div>
                    }
                    @if (((item.Id, Constants.ChangeState.Add) == ChangeItemState) || ((item.Id, Constants.ChangeState.Edit) == ChangeItemState))
                    {
                        <div class="zeon-tree-view-item-ae-inline">
                            <span class="zeon-tree-view-item-input">
                                <ZInput Type="string" DefaultValue="@(((item.Id, Constants.ChangeState.Edit) == ChangeItemState)?item.Text:string.Empty)" OnValueChanged="(value) => OnDataChanged(item,value,ChangeItemState.state)"></ZInput>
                            </span>
                            <span class="zeon-tree-view-item-input-cancel zf zf-ballot" @onclick="(e)=> CancelAddEditInlineClick.InvokeAsync()" @onclick:stopPropagation=true>
                            </span>
                        </div>
                    }
                </div>

                @if (item.Expanded && Data.Where(q => q.ParentId == item.Id).Any())
                {
                    <ChildrenTree GetItemId="GetItemId" Filter="Filter"
                      GetCheckBoxClassMode="GetCheckBoxClassMode" GetExpandedClassMode="GetExpandedClassMode" GetSelectedClassMode="GetSelectedClassMode"
                      Data="Data" Items="Data.Where(q=> q.ParentId == item.Id).ToList()"
                      CheckedOnClick="CheckedOnClick" ExpandedOnClick="ExpandedOnClick" SelectedOnClick="SelectedOnClick"
                      HandleOnDragEnter="HandleOnDragEnter" HandleOnDragLeave="HandleOnDragLeave"
                      ShowCheckedBox="ShowCheckedBox"
                      GetDragOnEnterTopClass="GetDragOnEnterTopClass"
                      GetDragOnEnterBottomClass="GetDragOnEnterBottomClass"
                      GetDragOnEnterIntoClass="GetDragOnEnterIntoClass"
                      GetDragOnEnterGroupClass="GetDragOnEnterGroupClass"
                      ItemId="@item.Id"
                      DropElementsDisplay="@DropElementsDisplay"
                      OnDropStart="OnDropStart" OnDragStart="OnDragStart" OnDragEnd="OnDragEnd"
                      ChangeItemState="ChangeItemState" OnDataChanged="OnDataChanged"
                      DataChangeOnClick="DataChangeOnClick" RemoveItemOnClick="RemoveItemOnClick"
                      CancelAddEditInlineClick="CancelAddEditInlineClick">
                    </ChildrenTree>
                }
            </li>


            @if (index == dataFiltered.Length - 1)
            {
                <div class="zeon-tree-view-item-drop-line @dragOnEnterBottomClass" style="--drop-elements-display:@DropElementsDisplay"
             @ondragenter="(e)=> HandleOnDragEnter.InvokeAsync((e,DragToPosition.Bottom,item))" @ondragenter:stopPropagation=true
             @ondragleave="(e)=> HandleOnDragLeave.InvokeAsync((e,DragToPosition.Bottom,item))" @ondragleave:stopPropagation=true
             @ondrop="(e)=> OnDropStart(e,DragToPosition.Bottom,item)" @ondrop:stopPropagation=true ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
                </div>
            }
        }

    }
</ul>